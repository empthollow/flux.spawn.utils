#!/bin/bash

# Declare Variables


if [ -f /etc/conf.d/f2hdvar ]; then
. /etc/conf.d/f2hdvar
else
username=flux
password=password
partition=/dev/sdxx
swap=/dev/sda$(parted -s /dev/sda print | grep -m 1 swap | cut -c 2-3)
target=/media/targethd
groups=storage,floppy,optical,audio,video,network,games,wheel,disk
hostnm=FluxCapacity
fstype=ext4
status=Complete
arch=$(uname -m)
fi
insver=$(pacman -Qys flux-utils-git | grep -o [0-9]*-[0-9])
error()
{
if [ "$?" != "0" ]; then
status=Failed
unmount
exit 1
fi
}

unmount()
{
echo "Unmounting File Systems"
umount $target/proc > /dev/null
umount $target/sys > /dev/null
umount $target/dev > /dev/null
umount /media/live > /dev/null
umount /media/tmp > /dev/null
umount /media/rtimage > /dev/null
umount $target > /dev/null

echo "Installation $status [Press Enter]"
read
}


writevar()
{
echo "username=$username
password=$password
partition=$partition
swap=$swap
target=$target
groups=$groups
hostnm=$hostnm
status=$status
arch=$arch
fstype=$fstype" > /etc/conf.d/f2hdvar
}

selecttype()
{
echo ""
echo "1 - EXT2"
echo "2 - EXT3"
echo "3 - EXT4"
echo "4 - XFS"
echo "5 - ReiserFS"
echo -n "Enter Selection >"
typechoice=
read typechoice
case $typechoice in
	1 ) fstype=ext2 ;;
	2 ) fstype=ext3 ;;
	3 ) fstype=ext4 ;;
	4 ) fstype=xfs ;;
	5 ) fstype=reiserfs ;;
	* ) echo "Try Again"; selecttype ;;
esac

}

selectarch()
{
echo ""
echo "1 - i686"
echo "2 - x86_64"
echo -n "Enter Selection >"
typechoice=
read typechoice
case $typechoice in
	1 ) arch=i686 ;;
	2 ) arch=x86_64 ;;
	* ) echo "Try Again"; selectarch ;;
esac
}

setvalues()
{
setme=
until [ "$setme" = "0" ]; do
clear
echo ""
echo "VARIABLES"
echo "1 - Username: $username"
echo "2 - Partition: $partition"
echo "3 - Swap: $swap"
echo "4 - Mount Directory: $target"
echo "5 - User's Groups: $groups"
echo "6 - Hostname: $hostnm"
echo "7 - Filesstem Type: $fstype"
echo "8 - Architecture: $arch"
echo "0 - Done"
echo ""
echo -n "Enter Selection >"
read setme
case $setme in
	1	)	clear; echo -n "Enter Username >"; read username ;;
	2	)	clear; fdisk -l; echo -n "Enter Root Partition >"; read partition ;;
	3	)	clear; fdisk -l; echo -n "Enter Swap Partition >"; read swap ;;
	4	)	clear; echo -n "Enter Mount Directory >"; read target ;;
	5	)	clear; echo -n "Enter Groups >"; read groups ;;
	6	)	clear; echo -n "Enter Hostname >"; read hostnm ;;
	7	)	clear; selecttype;;
	8	)	clear; selectarch;;
	0	)	writevar ; setme=0 ;;
	*	)	echo "Try again [Press Enter]" ; read ;;
esac
done
}

prepchroot()
{
# prepare chroot for use
echo "Mounting File Systems"
swapon $swap
cp /etc/resolv.conf $target/etc/
mount -t proc proc $target/proc
mount -t sysfs sys $target/sys
mount -o bind /dev $target/dev
}

filemods()
{
# File System Modifications for permanent install
echo "File Mods"
sed -i '/aufs/d' $target/etc/fstab
error
echo "$partition		/		auto	defaults	0	0" >> $target/etc/fstab
error
echo "/dev/cdrom		/media/cd		auto		ro,user,noauto	0	0" >> $target/etc/fstab
error
echo "/dev/dvd		/media/dvd		auto		ro,user,noauto	0	0" >> $target/etc/fstab
error
echo $hostnm > $target/etc/hostname
error
battery=$(ls /sys/class/power_supply | grep BAT)
if [ -n $battery ]; then
sed -i s/BAT/$battery/g $target/etc/skel/.conkyrc
sed -i '41 s/^#//' $target/etc/skel/.conkyrc
sed -i '42 s/^#//' $target/etc/skel/.conkyrc
fi
error
sed -i '8,100 d' $target/etc/rc.local
error
echo "# Create fstab, bookmarks and mount
for dev in \$(ls /dev/disk/by-label/ | grep -v FluxCapacity) ; do
        mkdir /media/\$dev
        echo \"/dev/disk/by-label/\$dev /media/\$dev auto defaults,exec,users,rw 0 0\" >> /etc/fstab
        echo \"file:///media/\$dev \$dev\" >> /home/flux/.gtk-bookmarks
        echo \"\\\${if_mounted /media/\$dev}\\\${color gray}\$dev\\\${color #707070}: \\\$color\\\${fs_used /media/\$dev}/\\\${fs_size /media/\$dev} 
 \\\${color gray}Free\\\${color #707070}: \\\$color\\\${fs_free /media/\$dev} \\\${fs_bar /media/\$dev}\\\${endif}\" >> /etc/skel/.conkyrc
done
mount -a
updatedb &
sed -i '8,30 d' /etc/rc.local" >> $target/etc/rc.local
error
sed -i s/flux/$username/g $target/etc/slim.conf

}

chcmds()
{
# excecute chroot commands
echo "Generating Locals"
edlo=
echo "locale is set to en_US-UTF-8"
echo -n "Edit locale.gen? [(v)im/n(a)no/(N)o] >"
read edlo
case $edlo in
	v | V	)	vim $target/etc/locale.gen ;;
	a | A	)	nano $target/etc/locale.gen ;;
	*	)	;;
esac
chroot $target locale-gen
echo "Configuring initrd"
chroot $target pacman -Sy --noconfirm linux
chroot $target mkinitcpio -p linux
error
echo "Configuring Sound"
chroot $target amixer set PCM 100% unmute
chroot $target amixer set Master 90% unmute
chroot $target alsactl store
echo "Adding $username" 
chroot $target userdel -r flux
chroot $target useradd -u 1000 -g users -G $groups -m $username
error

}

setpass()
{
echo "Choose password for $username" 
chroot $target passwd $username
[ "$?" = "0" ] || setpass
echo "Choose password for root" 
chroot $target passwd root
[ "$?" = "0" ] || chroot $target passwd root
}


formatparts()
{
if [ "$partition" == "/dev/sdxx" ]; then
echo "you must change the install partition [Press Enter]"
read
setvalues
fi

echo "$partition will be formated as ext4"
echo "$swap will be formated as swap"
echo -n "Is this correct? [y/n/e(edit)] >"
fp=
read fp
case $fp in
	y | Y	) umount $swap ; swapoff $swap ; mkswap $swap ; umount /media/tmp ; umount $partition ; mkfs.$fstype -j -O dir_index -L "$hostnmHD" $partition ; echo "Done [Press Enter]"; read ;;
	n | N	) echo "NO CHANGES WERE MADE [Press Enter]" ; read ;;
	e | E	) setvalues  ; formatparts ;; 
	*	) echo "Try again [Press Enter]" ; read ; formatparts ;;
esac
}

installcd()
{
if [ "$partition" == "/dev/sdxx" ]; then
echo "you must change the install partition [Press Enter]"
read
setvalues
fi

#get live cd filesystem
echo "Preparing"
test -d /media/live || mkdir -p /media/live
if [ -z "$(cat /proc/mounts | grep /media/live)" ]; then
mount -v -r -o loop /dev/disk/by-label/FluxCapacity /media/live > /dev/null
fi
test -d $target || mkdir -p $target
mount $partition $target
test -d /media/tmp || mkdir -p /media/tmp
test -d /media/rtimage || mkdir -p /media/rtimage
error
mount -o loop /media/live/flux/$arch/airootfs.sfs /media/tmp
mount -o loop /media/tmp/airootfs.img /media/rtimage
error
echo "Preparing to Copy Files....."
total=$(ls -lR /media/rtimage/ | wc -c)
echo -n "Copying Files"
cp -ar /media/rtimage/* $target &
dest=0
while [ $total -gt $dest ] ; do
	dest=$(ls -lR $target | wc -c)
	pct=$(((100 * $dest ) / $total ))
if [ $pct -lt 10 ] ; then
	echo -en "> $pct%\b\b\b\b"
else
	echo -en "> $pct%\b\b\b\b\b"
fi
sleep 1
done
umount /media/rtimage
umount /media/tmp
umount /media/live

prepchroot
filemods
chcmds
setpass

# unmount
unmount
}

installfresh()
{
bits=n
echo -n "Is this a 64 bit system? (y/n) >"
read bits
if [ "$bits" == "y" ]; then
	sed -i '29 s/i686/x86_64/' /etc/pacman.conf 
fi
test -d $target || mkdir -p $target
mount $partition $target
mkdir -p $target/var/lib/pacman 
pacman -Sy -r $target
mkdir -p $target/var/cache/pacman/pkg
pacman  -Su base --cachedir $target/var/cache/pacman/pkg -r $target
prepchroot
cp /etc/pacman.d/mirrorlist $target/etc/pacman.d/
pacman -Qeq > /tmp/packages.list

prepkg=
echo -n "Edit packages.list? [(v)im/n(a)no/(N)o] >"
read prepkg
case $prepkg in
	v | V	)	vim /tmp/packages.list ;;
	a | A	)	nano /tmp/packages.list ;;
	*	)	;;
esac
pacman --cachedir $target/var/cache/pacman/pkg -r $target -S $(cat /tmp/packages.list)

prepchroot
modme=
echo -n "Apply Flux Capacity Custom Files? [Y/n] >"
read modme

case $modme in
	n | N	)	;;
	*	)	tar -xf /etc/overlay.tar.gz -C $target --strip-components=1 ; filemods ;;
esac

chcmds
setpass

unmount
}


grubins()
{
if [ "$partition" == "/dev/sdxx" ]; then
echo "you must change the install partition [Press Enter]"
read
setvalues
fi

grubpart=$(echo $partition | grep -o [0-9])
grubnum=$(echo $partition | sed s/[0-9]// | sed "s/\/dev\/sd//g")
case $grubnum in
	a ) grubdisk="hd0" ;;
	b ) grubdisk="hd1" ;;
	c ) grubdisk="hd2" ;;
	d ) grubdisk="hd3" ;;
	e ) grubdisk="hd4" ;;
	f ) grubdisk="hd5" ;;
	g ) grubdisk="hd6" ;;
	h ) grubdisk="hd7" ;;
	i ) grubdisk="hd8" ;;
	j ) grubdisk="hd9" ;;
	* ) echo "grubdisk not set"; error ;;
esac


test -d $target || mkdir $target
[ $(cat /proc/mounts | grep $target ) ] || mount $partition $target
error

echo "Installing Grub"
grub-install --recheck --target=i386-pc --root-directory=$target $(echo $partition | sed s/[0-9]//g)
error
mkdir -p /boot/grub/locale
cp /usr/share/locale/en\@quot/LC_MESSAGES/grub.mo $target/boot/grub/locale/en.mo
error

echo "#!/bin/sh
echo \"Adding $hostnm\"
cat << EOF
menuentry \"$hostnm\" {
set root=($grubdisk,$grubpart)
linux /boot/vmlinuz-linux root=$partition 
initrd /boot/initramfs-linux.img
}
EOF" > $target/etc/grub.d/05_linux
chmod +x $target/etc/grub.d/05_linux

winfullpart=$(fdisk -l | grep -i ntfs | grep -o -m 1 '/dev/sd[[:alpha:]][[:digit:]]')
winnum=$(echo $winfullpart | sed s/[0-9]// | sed "s/\/dev\/sd//g")
winpart=$(echo $winfullpart | grep -o [0-9])

case $winnum in
	a ) windisk="hd0" ;;
	b ) windisk="hd1" ;;
	c ) windisk="hd2" ;;
	d ) windisk="hd3" ;;
	e ) windisk="hd4" ;;
	f ) windisk="hd5" ;;
	g ) windisk="hd6" ;;
	h ) windisk="hd7" ;;
	i ) windisk="hd8" ;;
	j ) windisk="hd9" ;;
	* ) echo "windisk not set"; error ;;
esac

test -z $windisk || echo "#!/bin/sh
echo \"Adding Windows Entry\"
cat << EOF
menuentry \"Windows\" {
set root=($windisk,$winpart)
chainloader ($windisk,$winpart)\+1
}
EOF" > $target/etc/grub.d/50_windows
if [ -e /etc/grub.d/50_windows ]; then
	 chmod +x $target/etc/grub.d/50_windows
fi

prepchroot
chroot $target grub-mkconfig -o /boot/grub/grub.cfg
unmount
echo "press [enter] to continue ..."
read
}

if [ "$(id -u)" != "0" ]; then
echo "You must be root for this to work"
else


selection=
until [ "$selection" = "00" ]; do
clear
echo "                             Flux Installer $insver" 
echo ""
echo "***********************************  VARIABLES  ***************************"
echo "Username: $username"
echo "Partition: $partition"
echo "Swap: $swap"
echo "Mount Directory: $target"
echo "Users Groups: $groups"
echo "Host Name: $hostnm"
echo "Filesystem Type: $fstype"
echo "***************************************************************************"
echo ""
echo "1  - Partition with cfdisk"
echo "2  - Format Partitions"
echo "3  - Install to HD (As on cd)"
echo "4  - Install Fresh from Repositories"
echo "5  - Install grub"
echo "0  - Change Variables"
echo "00 - Exit"
echo ""
echo -n "Enter Selection >"
    read selection
    case $selection in
	1 	) cfdisk ;;
	2	) formatparts ;;
	3	) installcd ;;
	4	) installfresh ;;
	5	) grubins ;;
	0	) setvalues ;;
	00 	) clear; exit ;;
	* 	) echo "Please enter a valid selection [ Press Enter ]" ; read ;;
    esac
done
fi
